{
  "master": {
    "tasks": [
      {
        "id": 16,
        "title": "Fix Search Results Rendering Bug in SearchPage.tsx",
        "description": "Resolve the critical issue where search results are logged to console but not rendered on screen.",
        "details": "Investigate and fix the rendering logic in SearchPage.tsx. Ensure that the result array (e.g., from Supabase query) is properly mapped and rendered using React elements. Validate that the data structure matches expected shape (e.g., {name, score, confidence, address}). Use console logging to verify data flow before and after rendering. Apply strict TypeScript typing for search results to prevent type mismatches.",
        "testStrategy": "Verify that search results appear in the UI when a query is entered; check console logs confirm correct result array structure; test with multiple queries (e.g., '渋谷', '恵比寿') and validate rendering consistency.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Remove Redundant Favorite Button in Search UI",
        "description": "Eliminate the unnecessary 'favorite' button from the search results page to simplify UX.",
        "details": "Locate and remove the redundant favorite button component in SearchPage.tsx. Ensure no side effects (e.g., state updates or API calls) are triggered by its removal. Update UI to maintain minimalism while preserving functionality of other buttons (e.g., 'View Details').",
        "testStrategy": "Confirm that the favorite button is completely absent from search results; verify no unintended behavior occurs when interacting with other elements.",
        "priority": "medium",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Fix Bookmark Button Layout on Mobile Devices",
        "description": "Resolve the responsive layout issue where bookmark buttons collapse or overlap on mobile views.",
        "details": "Update the CSS media queries in `styles/mobile.css` to ensure the 'Go' and 'Bookmark' buttons are properly stacked or spaced. Use Flexbox/Grid with breakpoints (e.g., 320px, 480px) for responsive behavior. Test on actual mobile devices using Chrome DevTools.",
        "testStrategy": "Test on iPhone and Android emulators; verify button visibility and spacing at various screen sizes; confirm no clipping or overlap in small screens.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Unify Bookmark & Favorite Functionality to 'Favorites' and 'Visited'",
        "description": "Replace dual concepts of 'bookmark' and 'favorite' with two clear states: 'Favorite' and 'Visited'.",
        "details": "Update the state management in `BookmarkContext.tsx` to track two distinct flags: `isFavorite`, `isVisited`. Modify UI components (e.g., store detail page) to show appropriate labels. Ensure backend Supabase schema supports these fields with proper update logic via API calls.",
        "testStrategy": "Verify that toggling 'favorite' or 'visited' updates state correctly; confirm both states are clearly displayed in UI; test cross-page navigation between detail and my page.",
        "priority": "high",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Stabilize Auto-Complete Functionality with Google Places API",
        "description": "Fix inconsistent behavior of auto-complete when searching for locations like '恵比寿'.",
        "details": "Review and adjust the Google Places Autocomplete API configuration in `useAutoComplete.tsx`. Set proper request parameters (e.g., types: ['establishment'], language: 'ja'). Implement fallback to mock data if API fails. Use debounce (e.g., 300ms) to reduce unnecessary requests. Validate with both '渋谷駅' and '恵比寿'.",
        "testStrategy": "Test auto-complete input with various queries; verify results appear consistently across locations; confirm no errors in console when API fails.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Enhance Map Pin Display with Store Information",
        "description": "Add shop details (name, rating) to map pins for better identification.",
        "details": "Modify the Google Maps React component (`MapContainer.tsx`) to render custom pin markers that display name and rating on hover or click. Use `infoWindow` or `markerClusterer` with dynamic content from Supabase API response. Ensure mobile touch events are properly handled.",
        "testStrategy": "Click a pin; verify info window shows correct shop details (name, score); test on both desktop and mobile devices; confirm no layout issues in small screens.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Optimize Bundle Size and Performance via Vite & React",
        "description": "Reduce bundle size to under 200KB and improve page load time by 50%.",
        "details": "Use Vite's built-in analysis tool (`vite build --report`) to identify large dependencies. Remove unused imports, optimize image assets (e.g., WebP format), and enable tree-shaking in React components. Apply lazy loading for non-critical routes (e.g., store detail page).",
        "testStrategy": "Measure bundle size via Lighthouse; verify load time reduction by 50% on average; confirm performance metrics meet target thresholds.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Conduct Cross-Platform and Accessibility Testing",
        "description": "Ensure full compatibility across devices, browsers, and accessibility standards.",
        "details": "Run automated tests using Lighthouse (accessibility score ≥90), Cypress for cross-browser testing. Manually test on iOS Safari, Chrome Mobile, and Firefox. Verify keyboard navigation, screen reader support, and ARIA labels in all UI components.",
        "testStrategy": "Confirm accessibility score ≥90; validate functionality across 3 desktop and 2 mobile browsers; collect user feedback via in-app survey post-release.",
        "priority": "high",
        "dependencies": [
          16,
          17,
          18,
          19,
          20,
          21
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-19T02:50:16.305Z",
      "updated": "2025-08-20T14:19:48.476Z",
      "description": "Tasks for master context"
    }
  }
}