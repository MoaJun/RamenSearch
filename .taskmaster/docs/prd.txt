# ramensearch緊急バグ修正・機能改善PRD

## プロジェクト概要

**目的**: ramensearch（ラーメン店検索アプリ）の緊急バグ修正とUX改善により、現在使用不可能な機能を復旧し、ユーザビリティを向上させる。

**現在の状況**: 
- React 18.3.1 + TypeScript 5.7.2 + Vite 6.2.0構成
- Google Maps統合、Supabase バックエンド
- **緊急課題**: 検索結果が画面に表示されない致命的バグ
- ブックマーク機能のモバイル表示問題
- オートコンプリート機能の不安定性

## 緊急修正項目（優先度順）

### 1. 検索機能の重大バグ修正（最高優先度）

#### 1.1 検索結果表示問題
- **現象**: コンソールには検索結果が出力されるが画面に表示されない
- **エラーメッセージ例**: 
  - "俺流塩らーめん 渋谷三丁目店: score=8, confidence=0.8"
  - "Comprehensive search results (by area): Array(49)"
- **影響**: アプリケーションが実質的に使用不可能
- **修正内容**: SearchPage.tsxの検索結果レンダリングロジック修正

#### 1.2 検索画面UI整理
- **問題**: 検索画面にある不要なお気に入りボタン
- **修正内容**: お気に入りボタンの削除とUI簡素化

### 2. ブックマーク機能の改善（高優先度）

#### 2.1 モバイル表示の修正
- **問題**: 店舗詳細ページのブックマーク機能（「行く」「お気に入り」）がモバイルビューで潰れて表示
- **修正内容**: レスポンシブデザインの修正

#### 2.2 機能統一化
- **問題**: 「ブックマーク」と「お気に入り」の概念が混在
- **修正内容**: 「お気に入り」「訪問済み」の2項目制に統一

#### 2.3 ページ間連動
- **要求**: 店舗詳細ページとマイページの連動確認・修正

### 3. オートコンプリート機能の安定化（中優先度）

#### 3.1 地名による動作差異の修正
- **問題**: 「渋谷駅」では機能するが「恵比寿」では機能しない不安定性
- **修正内容**: Google Places API設定の見直しと安定化

### 4. マップ機能の最適化（中優先度）

#### 4.1 API使用料最適化
- **問題**: Nearby API使用によるコスト懸念（検索範囲500M）
- **修正内容**: デプロイまではモックデータでのテスト環境構築

#### 4.2 ピン情報表示
- **問題**: マップピンクリックで店舗詳細に遷移するが、ピンに店舗情報が表示されず識別困難
- **修正内容**: ピンへの店舗情報表示機能追加

### 5. 不要機能の整理（低優先度）

#### 5.1 フィードバック機能の削除
- **現状**: 現時点で不要な機能
- **修正内容**: バックアップ作成後、機能の削除

## 技術要件

### パフォーマンス指標
- Lighthouse Score: 全カテゴリで90点以上
- Bundle Size: 総サイズ200KB以下（gzipped）
- FCP: 1.0秒以下
- TTI: 2.0秒以下
- CLS: 0.1以下

### 対応環境
- **デスクトップ**: Chrome 90+, Firefox 88+, Safari 14+
- **モバイル**: iOS Safari 14+, Chrome Mobile 90+
- **画面サイズ**: 320px ～ 2560px

### 技術制約
- 現在の技術スタック（React + TypeScript + Vite）を維持
- Google Maps APIの使用を継続
- Supabaseバックエンドとの互換性維持
- 既存機能の破壊的変更は避ける

## 成功指標

### 定量指標
- ページロード時間: 50%短縮
- バンドルサイズ: 20%削減
- モバイルユーザビリティスコア: 95点以上
- アクセシビリティスコア: 90点以上

### 定性指標
- ユーザーからのパフォーマンス関連の苦情削減
- UI/UXに関するポジティブフィードバック増加
- モバイルユーザーの利用時間向上

## 実装フェーズ

### Phase 1: パフォーマンス最適化（優先度: 高）
- バンドル分析と最適化
- 画像・アセット最適化
- クリティカルパス最適化
- キャッシュ戦略改善

### Phase 2: UI/UX改善（優先度: 中）
- デザインシステムの統一
- ユーザビリティ改善
- アクセシビリティ対応
- エラーハンドリング改善

### Phase 3: モバイル対応強化（優先度: 中）
- レスポンシブデザイン完善
- PWA機能実装
- モバイル固有機能追加
- パフォーマンス最適化

## リスクと対策

### 技術リスク
- **リスク**: 最適化により既存機能の破損
- **対策**: 段階的実装、テスト自動化、ロールバック計画

### ユーザビリティリスク
- **リスク**: UI変更によるユーザー離れ
- **対策**: A/Bテスト、段階的ロールアウト、フィードバック収集

### パフォーマンスリスク
- **リスク**: 過度な最適化によるコード複雑化
- **対策**: バランスの取れた最適化、コードレビュー強化

## 依存関係

### 外部依存
- Google Maps API制限の確認
- Supabaseパフォーマンス制約
- CDN・ホスティング環境の最適化

### 内部依存
- 現在の開発チーム体制
- テスト環境の整備
- デプロイメントパイプライン

## 完了基準

各フェーズの完了基準:
1. **技術指標の達成**: Lighthouse、バンドルサイズ、ロード時間
2. **機能テストの通過**: 既存機能の正常動作確認
3. **アクセシビリティテスト**: 自動テスト＋手動確認
4. **クロスブラウザテスト**: 対象環境での動作確認
5. **モバイルテスト**: 実機での操作確認