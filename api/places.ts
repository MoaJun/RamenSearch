import type { VercelRequest, VercelResponse } from '@vercel/node';

// Helper function to fetch Place Details
async function fetchPlaceDetails(placeId: string) {
  const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;
  if (!GOOGLE_MAPS_API_KEY) {
    throw new Error('Google Maps API Key is not set.');
  }
  const fields = 'name,formatted_address,rating,photos,opening_hours,website,reviews,geometry,editorial_summary,url,vicinity,plus_code,price_level,user_ratings_total,international_phone_number';
  const detailsApiUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=${fields}&key=${GOOGLE_MAPS_API_KEY}`;
  const response = await fetch(detailsApiUrl);
  const data = await response.json();
  if (data.status !== 'OK') {
    console.error('Place Details API Error:', data);
    throw new Error(`Place Details API Error: ${data.status}`);
  }
  return data.result;
}

export default async function handler(
  req: VercelRequest,
  res: VercelResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { query } = req.query;

  if (!query) {
    return res.status(400).json({ error: 'Query parameter is required' });
  }

  const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;
  if (!GOOGLE_MAPS_API_KEY) {
    return res.status(500).json({ error: 'Google Maps API Key is not set.' });
  }

  try {
    // Step 1: Text Search to get place_ids
    const textSearchApiUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(query as string)}&type=restaurant&keyword=ラーメン&key=${GOOGLE_MAPS_API_KEY}`;
    const textSearchResponse = await fetch(textSearchApiUrl);
    const textSearchData = await textSearchResponse.json();

    if (textSearchData.status !== 'OK' && textSearchData.status !== 'ZERO_RESULTS') {
      console.error('Google Places Text Search API Error:', textSearchData);
      return res.status(500).json({ error: `Google Places Text Search API Error: ${textSearchData.status}` });
    }

    const placeIds = textSearchData.results.map((place: any) => place.place_id);

    // Step 2: Fetch details for each place_id concurrently
    const detailedPlacesPromises = placeIds.map(fetchPlaceDetails);
    const detailedPlaces = await Promise.all(detailedPlacesPromises);

    const ramenShops = detailedPlaces.map((place: any) => {
      const photos = place.photos ? place.photos.map((photo: any) => ({
        small: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${GOOGLE_MAPS_API_KEY}`,
        medium: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${GOOGLE_MAPS_API_KEY}`,
        large: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photoreference=${photo.photo_reference}&key=${GOOGLE_MAPS_API_KEY}`,
        alt: place.name + ' photo',
      })) : [];

      const reviews = place.reviews ? place.reviews.map((review: any) => ({
        author: review.author_name,
        text: review.text,
        rating: review.rating,
      })) : [];

      return {
        placeId: place.place_id,
        name: place.name,
        address: place.formatted_address || place.vicinity || '',
        rating: place.rating || 0,
        photos: photos,
        hours: place.opening_hours?.weekday_text?.join('\n') || '営業時間不明',
        website: place.website || place.url || '#',
        twitterUrl: '', // Google Places API does not directly provide Twitter URLs
        reviews: reviews,
        distance: 0, // Will be calculated on client-side or by Gemini
        keywords: [], // Will be generated by Gemini
        isOpenNow: place.opening_hours?.open_now || false,
        congestion: '不明', // Google Places API does not directly provide congestion
        accessInfo: place.formatted_address || place.vicinity || '',
        menu: [], // Google Places API does not directly provide menu
        parkingInfo: '', // Google Places API does not directly provide parking info
      };
    });

    res.status(200).json({ shops: ramenShops });

  } catch (error) {
    console.error('Error in Places API handler:', error);
    res.status(500).json({ error: (error as Error).message || 'Internal Server Error' });
  }
}
